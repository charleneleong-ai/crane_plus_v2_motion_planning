/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-05-25 09:08:05.316050
/// Generated using solver translationdirection5d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((2.0e-7)*x4);
x11=((1.8e-7)*x2);
x12=((1.8e-7)*x7);
x13=((0.0965)*x4);
x14=((1.0)*x0);
x15=((0.0965)*x0);
x16=((0.083)*x1);
x17=((1.0)*x7);
x18=((0.094)*x0);
x19=((0.0965)*x7);
x20=((1.8e-7)*x0);
x21=(x1*x2);
x22=(x3*x7);
x23=(x1*x4);
x24=(x2*x3);
x25=(x0*x3);
x26=((1.0)*x3*x4);
x27=((1.8e-7)*x3*x4);
IkReal x28=(x0*x1);
IkReal x29=((1.0)*x25);
eetrans[0]=((-0.0163)+((x5*((((x20*x3*x4))+((x11*x28))))))+((x18*x24))+(((-1.0)*x0*x16))+((x6*((((x13*x25))+((x15*x21))))))+(((-5.0e-8)*x25))+((x6*(((((-1.0)*x11*x29))+((x20*x23))))))+(((-2.0e-7)*x0*x21))+(((-1.0)*x10*x29))+(((-1.0)*x18*x23))+(((5.0e-8)*x7))+((x5*(((((-1.0)*x13*x28))+((x15*x24)))))));
IkReal x30=((1.0)*x22);
IkReal x31=((1.0)*x7);
eetrans[1]=((((0.094)*x2*x22))+(((-2.0e-7)*x21*x7))+((x5*((((x1*x11*x7))+((x12*x3*x4))))))+(((-1.0)*x10*x30))+(((-5.0e-8)*x0))+(((-5.0e-8)*x22))+((x5*((((x19*x24))+(((-1.0)*x1*x13*x31))))))+(((-0.094)*x23*x7))+((x6*((((x19*x21))+((x13*x22))))))+(((-1.0)*x16*x31))+((x6*(((((-1.0)*x11*x30))+((x12*x23)))))));
IkReal x32=((1.0)*x11);
eetrans[2]=((0.0715)+((x6*((((x1*x13))+(((-0.0965)*x24))))))+(((2.0e-7)*x24))+(((0.094)*x3*x4))+((x6*(((((-1.0)*x27))+(((-1.0)*x1*x32))))))+(((0.083)*x3))+(((-5.0e-8)*x1))+(((-1.0)*x1*x10))+((x5*(((((-1.0)*x3*x32))+(((1.8e-7)*x23))))))+(((0.094)*x21))+((x5*(((((0.0965)*x21))+((x13*x3)))))));
eerot[0]=(((x8*((((x5*((((x14*x24))+(((-1.0)*x14*x23))))))+((x6*((((x14*x21))+((x14*x3*x4))))))))))+((x7*x9)));
eerot[1]=(((x8*((((x6*((((x17*x21))+((x17*x3*x4))))))+((x5*(((((-1.0)*x17*x23))+((x17*x24))))))))))+(((-1.0)*x14*x9)));
eerot[2]=(x8*((((x6*(((((-1.0)*x24))+(((1.0)*x23))))))+((x5*(((((1.0)*x21))+x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.0163)+px);
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.0715)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x35 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x35.valid){
continue;
}
IkReal x33=((1.0)*(x35.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x36=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x36.valid){
continue;
}
if( (((5.0e-8)*(x36.value))) < -1-IKFAST_SINCOS_THRESH || (((5.0e-8)*(x36.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x34=IKasin(((5.0e-8)*(x36.value)));
j0array[0]=((((-1.0)*x33))+x34);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x34))+(((-1.0)*x33)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x37=py*py;
IkReal x38=px*px;
IkReal x39=pz*pz;
IkReal x40=((0.022016749999996)*r02);
IkReal x41=((1.41707772020192e-8)*r02);
IkReal x42=((5.98259067355944e-9)*r02);
IkReal x43=((0.00919124999998419)*r02);
IkReal x44=(cj0*r00);
IkReal x45=((0.165999999999908)*pz);
IkReal x46=(px*r01);
IkReal x47=(r01*sj0);
IkReal x48=(r00*sj0);
IkReal x49=(px*r00);
IkReal x50=((0.166000000000092)*pz);
IkReal x51=(cj0*r02);
IkReal x52=((2.0)*px);
IkReal x53=((1.0e-7)*py);
IkReal x54=((4.0)*px);
IkReal x55=(pz*r02);
IkReal x56=(py*sj0);
IkReal x57=(cj0*r01);
IkReal x58=((4.0)*py);
IkReal x59=((2.0e-7)*pz);
IkReal x60=(py*r01);
IkReal x61=((1.0e-7)*pz);
IkReal x62=((2.0)*pz);
IkReal x63=((2.0e-7)*py);
IkReal x64=((4.50673575129705e-7)*pz);
IkReal x65=((2.50673575129705e-7)*pz);
IkReal x66=((0.354000000000092)*x60);
IkReal x67=((1.77000000000046e-8)*x57);
IkReal x68=((0.354000000000092)*x49);
IkReal x69=((0.354000000000092)*x55);
IkReal x70=((1.77000000000046e-8)*x48);
IkReal x71=((4.50292227979808e-8)*x44);
IkReal x72=((4.50292227979808e-8)*x47);
IkReal x73=((1.0e-7)*x46);
IkReal x74=((7.46632124351474e-15)*x48);
IkReal x75=(r00*x53);
IkReal x76=((7.46632124351474e-15)*x57);
IkReal x77=((1.49326424870295e-7)*x60);
IkReal x78=((1.49326424870295e-7)*x49);
IkReal x79=((1.49326424870295e-7)*x55);
IkReal x80=((0.00736524999997898)*x47);
IkReal x81=((0.00736524999997898)*x44);
IkReal x82=((2.53367875648526e-15)*x48);
IkReal x83=((5.06735751297053e-8)*x49);
IkReal x84=((5.06735751297053e-8)*x55);
IkReal x85=((0.00736524999999919)*x47);
IkReal x86=((0.00736524999999919)*x44);
IkReal x87=((5.06735751297053e-8)*x60);
IkReal x88=((2.53367875648526e-15)*x57);
IkReal x89=(r02*x39);
IkReal x90=(r00*x63);
IkReal x91=((2.0e-7)*x46);
IkReal x92=(r02*x37);
IkReal x93=(r02*x38);
IkReal x94=((0.022000000000092)*x60);
IkReal x95=((0.022000000000092)*x55);
IkReal x96=((1.1000000000046e-9)*x57);
IkReal x97=((0.022000000000092)*x49);
IkReal x98=((3.19825906735594e-8)*x47);
IkReal x99=((1.1000000000046e-9)*x48);
IkReal x100=((3.19825906735594e-8)*x44);
IkReal x101=((1.0)*x37);
IkReal x102=((1.0)*x39);
IkReal x103=((2.0)*x38);
IkReal x104=(px*r02*sj0);
IkReal x105=((1.0)*x38);
IkReal x106=((2.0)*x37);
IkReal x107=((2.0)*x39);
IkReal x108=((1.0e-7)*x104);
IkReal x109=(x49*x62);
IkReal x110=((4.50673575129705e-7)*px*x51);
IkReal x111=(x57*x61);
IkReal x112=((4.50673575129705e-7)*r02*x56);
IkReal x113=(x60*x62);
IkReal x114=(x44*x64);
IkReal x115=(x47*x64);
IkReal x116=(x51*x53);
IkReal x117=(x48*x61);
IkReal x118=((0.165999999999908)*r02*x56);
IkReal x119=((0.165999999999908)*px*x51);
IkReal x120=(x45*x47);
IkReal x121=(x44*x45);
IkReal x122=(x39*x47);
IkReal x123=(x38*x47);
IkReal x124=(x37*x44);
IkReal x125=(x39*x44);
IkReal x126=(x51*x63);
IkReal x127=((2.0)*x92);
IkReal x128=((2.0)*x93);
IkReal x129=(x48*x59);
IkReal x130=(pz*r01*x58);
IkReal x131=(x57*x59);
IkReal x132=((2.0)*x89);
IkReal x133=((4.0)*pz*x49);
IkReal x134=((2.0e-7)*x104);
IkReal x135=((0.166000000000092)*r02*x56);
IkReal x136=(x38*x44);
IkReal x137=((0.166000000000092)*px*x51);
IkReal x138=(x37*x47);
IkReal x139=(x47*x50);
IkReal x140=(x44*x50);
IkReal x141=((1.0)*x92);
IkReal x142=((1.0)*x93);
IkReal x143=((2.50673575129705e-7)*r02*x56);
IkReal x144=((2.50673575129705e-7)*px*x51);
IkReal x145=(x47*x65);
IkReal x146=((1.0)*x89);
IkReal x147=(x44*x65);
IkReal x148=((2.0)*x55*x56);
IkReal x149=(py*x48*x52);
IkReal x150=((2.0)*cj0*py*x46);
IkReal x151=(pz*x51*x52);
IkReal x152=(x105*x44);
IkReal x153=(x101*x47);
IkReal x154=(x105*x47);
IkReal x155=(x102*x44);
IkReal x156=(x101*x44);
IkReal x157=(x102*x47);
IkReal x158=(x107*x47);
IkReal x159=(x103*x47);
IkReal x160=(x106*x44);
IkReal x161=(x107*x44);
IkReal x162=(py*x48*x54);
IkReal x163=(cj0*x46*x58);
IkReal x164=(pz*x51*x54);
IkReal x165=(x106*x47);
IkReal x166=(x103*x44);
IkReal x167=((4.0)*x55*x56);
IkReal x168=(x100+x98);
IkReal x169=(x72+x71);
IkReal x170=(x42+x86+x85);
IkReal x171=(x41+x80+x81);
IkReal x172=(x115+x114+x70);
IkReal x173=(x135+x137+x82);
IkReal x174=(x119+x118+x74);
IkReal x175=(x145+x147+x99);
IkReal x176=(x117+x116+x93+x92);
IkReal x177=(x126+x127+x128+x129);
IkReal x178=(x141+x142+x117+x116);
IkReal x179=(x124+x125+x122+x123+x75);
IkReal x180=(x113+x111+x108+x109+x89);
IkReal x181=(x146+x113+x111+x108+x109);
IkReal x182=(x134+x131+x130+x133+x132);
IkReal x183=(x143+x144+x95+x94+x97+x96);
IkReal x184=(x140+x139+x88+x83+x87+x84);
IkReal x185=(x112+x110+x66+x67+x68+x69);
IkReal x186=(x120+x121+x77+x76+x79+x78);
IkReal x187=(x157+x156+x155+x154+x75);
IkReal x188=(x160+x161+x159+x158+x90);
IkReal x189=(x151+x150+x148+x149+x136+x138+x73);
IkReal x190=(x162+x163+x166+x167+x164+x165+x91);
IkReal x191=(x153+x152+x151+x150+x148+x149+x73);
IkReal x192=((((-1.0)*x182))+x177+(((0.014730499999958)*r02))+(((-2.83415544040383e-8)*x44))+(((-2.83415544040383e-8)*x47)));
IkReal x193=((((-1.0)*x182))+x177+(((-1.19651813471189e-8)*x47))+(((-1.19651813471189e-8)*x44))+(((0.0147304999999984)*r02)));
IkReal x194=((((-1.0)*x188))+x190+(((9.00584455959617e-8)*r02))+(((0.044033499999992)*x47))+(((0.044033499999992)*x44)));
IkReal x195=((((-1.0)*x190))+x188+(((6.39651813471189e-8)*r02))+(((0.0183824999999684)*x47))+(((0.0183824999999684)*x44)));
IkReal x196=((((-1.0)*x172))+(((-1.0)*x40))+(((-1.0)*x181))+x176+x169+x185);
IkReal x197=((((-1.0)*x168))+(((-1.0)*x175))+(((-1.0)*x181))+x176+x183+x43);
IkReal x198=((((-1.0)*x169))+(((-1.0)*x178))+(((-1.0)*x172))+x185+x180+x40);
IkReal x199=((((-1.0)*x178))+(((-1.0)*x175))+(((-1.0)*x43))+x168+x180+x183);
IkReal x200=((((-1.0)*x186))+(((-1.0)*x191))+x179+x171+x174);
IkReal x201=((((-1.0)*x184))+(((-1.0)*x191))+x179+x170+x173);
IkReal x202=((((-1.0)*x171))+(((-1.0)*x187))+(((-1.0)*x186))+x174+x189);
IkReal x203=((((-1.0)*x170))+(((-1.0)*x187))+(((-1.0)*x184))+x173+x189);
IkReal gconst0=x196;
IkReal gconst1=x194;
IkReal gconst2=x198;
IkReal gconst3=x200;
IkReal gconst4=x192;
IkReal gconst5=x202;
IkReal gconst6=x196;
IkReal gconst7=x194;
IkReal gconst8=x198;
IkReal gconst9=x200;
IkReal gconst10=x192;
IkReal gconst11=x202;
IkReal gconst12=x201;
IkReal gconst13=x193;
IkReal gconst14=x203;
IkReal gconst15=x199;
IkReal gconst16=x195;
IkReal gconst17=x197;
IkReal gconst18=x201;
IkReal gconst19=x193;
IkReal gconst20=x203;
IkReal gconst21=x199;
IkReal gconst22=x195;
IkReal gconst23=x197;
IkReal x204=((1.0)*gconst21);
IkReal x205=(gconst14*gconst20);
IkReal x206=(gconst13*gconst17);
IkReal x207=(gconst14*gconst4);
IkReal x208=(gconst18*gconst22);
IkReal x209=(gconst20*gconst21);
IkReal x210=(gconst0*gconst17);
IkReal x211=(gconst12*gconst5);
IkReal x212=(gconst21*gconst8);
IkReal x213=((1.0)*gconst9);
IkReal x214=(gconst15*gconst2);
IkReal x215=(gconst16*gconst2);
IkReal x216=(gconst10*gconst18);
IkReal x217=(gconst1*gconst17);
IkReal x218=(gconst2*gconst3);
IkReal x219=(gconst2*gconst4);
IkReal x220=(gconst19*gconst21);
IkReal x221=(gconst19*gconst5);
IkReal x222=(gconst11*gconst6);
IkReal x223=(gconst12*gconst17);
IkReal x224=(gconst8*gconst9);
IkReal x225=(gconst7*gconst9);
IkReal x226=(gconst14*gconst3);
IkReal x227=(gconst14*gconst15);
IkReal x228=(gconst23*gconst6);
IkReal x229=(gconst14*gconst16);
IkReal x230=(gconst10*gconst6);
IkReal x231=(gconst1*gconst5);
IkReal x232=(gconst18*gconst23);
IkReal x233=(gconst20*gconst9);
IkReal x234=(gconst13*gconst5);
IkReal x235=(gconst11*gconst18);
IkReal x236=(gconst21*gconst7);
IkReal x237=(gconst19*gconst9);
IkReal x238=(gconst0*gconst5);
IkReal x239=(gconst22*gconst6);
IkReal x240=((1.0)*x239);
IkReal x241=(gconst2*x237);
IkReal x242=(gconst7*x217);
IkReal x243=((1.0)*x238);
IkReal x244=(gconst23*x243);
op[0]=((((-1.0)*x223*x232))+(((-1.0)*x208*x229))+((x209*x223))+(((-1.0)*gconst15*x204*x205))+(((-1.0)*gconst19*x204*x206))+((x220*x229))+((x227*x232))+((x206*x208)));
op[1]=((((-1.0)*gconst7*x204*x206))+((x227*x228))+(((-1.0)*x223*x235))+(((-1.0)*x210*x232))+((x229*x236))+((x229*x237))+(((-1.0)*x216*x229))+((x207*x220))+(((-1.0)*x229*x240))+(((-1.0)*x211*x232))+((x206*x216))+((x215*x220))+((x208*x217))+(((-1.0)*gconst19*x206*x213))+(((-1.0)*gconst19*x204*x217))+((x226*x232))+(((-1.0)*gconst8*x204*x227))+((x209*x210))+((x209*x211))+(((-1.0)*x207*x208))+(((-1.0)*gconst13*x204*x221))+(((-1.0)*gconst3*x204*x205))+((x227*x235))+((x214*x232))+(((-1.0)*x208*x215))+(((-1.0)*gconst15*x205*x213))+((x208*x234))+(((-1.0)*x223*x228))+((x223*x233))+(((-1.0)*gconst20*x204*x214))+((x212*x223))+((x206*x239)));
op[2]=(((x211*x233))+(((-1.0)*x215*x216))+((x234*x239))+(((-1.0)*gconst8*x213*x227))+(((-1.0)*gconst7*x204*x234))+((x225*x229))+(((-1.0)*x210*x235))+(((-1.0)*gconst13*x213*x221))+(((-1.0)*gconst7*x206*x213))+((x210*x212))+((x222*x227))+(((-1.0)*x211*x235))+(((-1.0)*gconst8*x204*x214))+(((-1.0)*x207*x240))+(((-1.0)*gconst3*x205*x213))+((x217*x239))+(((-1.0)*x204*x242))+((x216*x217))+((x214*x228))+((x218*x232))+(((-1.0)*gconst1*x204*x221))+(((-1.0)*x211*x228))+((x211*x212))+((x226*x235))+(((-1.0)*gconst8*x204*x226))+((x223*x224))+(((-1.0)*x210*x228))+(((-1.0)*x232*x243))+((x219*x220))+(((-1.0)*x229*x230))+(((-1.0)*x222*x223))+((x214*x235))+(((-1.0)*x215*x240))+(((-1.0)*gconst20*x213*x214))+(((-1.0)*x207*x216))+((x226*x228))+(((-1.0)*x208*x219))+((x215*x237))+((x215*x236))+((x209*x238))+((x216*x234))+((x208*x231))+((x207*x236))+((x207*x237))+(((-1.0)*gconst19*x213*x217))+((x210*x233))+(((-1.0)*gconst20*x204*x218))+((x206*x230)));
op[3]=(((x210*x224))+(((-1.0)*gconst8*x213*x226))+(((-1.0)*gconst7*x204*x231))+(((-1.0)*x228*x243))+(((-1.0)*gconst7*x213*x234))+((x207*x225))+((x222*x226))+((x215*x225))+(((-1.0)*gconst8*x204*x218))+(((-1.0)*x216*x219))+((x217*x230))+((x214*x222))+((x218*x235))+((x233*x238))+(((-1.0)*x215*x230))+(((-1.0)*x211*x222))+((x219*x236))+((x219*x237))+((x230*x234))+(((-1.0)*x210*x222))+(((-1.0)*gconst8*x213*x214))+(((-1.0)*x207*x230))+(((-1.0)*x219*x240))+(((-1.0)*x235*x243))+((x218*x228))+(((-1.0)*x213*x242))+(((-1.0)*gconst20*x213*x218))+(((-1.0)*gconst1*x213*x221))+((x216*x231))+((x231*x239))+((x212*x238))+((x211*x224)));
op[4]=((((-1.0)*gconst7*x213*x231))+(((-1.0)*x222*x243))+((x230*x231))+((x219*x225))+(((-1.0)*gconst8*x213*x218))+(((-1.0)*x219*x230))+((x218*x222))+((x224*x238)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x245=cj2*cj2;
IkReal x246=sj2*sj2;
IkReal x247=cj2*cj2*cj2;
IkReal x248=sj2*sj2*sj2;
IkReal x249=(cj0*px);
IkReal x250=(r01*sj0);
IkReal x251=(py*sj0);
IkReal x252=((0.386)*pz);
IkReal x253=((1.44e-6)*pz);
IkReal x254=((2.88e-6)*pz);
IkReal x255=((0.0372490000001296)*r02);
IkReal x256=(cj0*r00);
IkReal x257=(cj4*x245);
IkReal x258=(cj4*x248);
IkReal x259=(cj4*x246);
IkReal x260=((0.0744980000002592)*x245);
IkReal x261=(cj4*x247);
IkReal x262=((0.148996000000518)*x246);
IkReal x263=((0.148996000000518)*x245);
IkReal x264=((0.0744980000002592)*x246);
IkReal x265=(x245*x255);
IkReal x266=((0.096113999999892)*x257);
IkReal x267=((0.108851999999568)*x261);
IkReal x268=((4.3464e-7)*x258);
IkReal x269=((0.096113999999892)*x259);
IkReal x270=(x246*x255);
IkReal x271=((0.036283999999856)*x261);
IkReal x272=((0.032037999999964)*x259);
IkReal x273=((0.032037999999964)*x257);
IkReal x274=((1.4488e-7)*x258);
IkReal x275=(x252*x259);
IkReal x276=(x252*x257);
IkReal x277=((4.3464e-7)*sj2*x257);
IkReal x278=((0.108851999999568)*cj2*x259);
IkReal x279=((1.4488e-7)*sj2*x257);
IkReal x280=((0.036283999999856)*cj2*x259);
IkReal x281=((7.2e-7)*x249*x257);
IkReal x282=((7.2e-7)*x249*x259);
IkReal x283=((7.2e-7)*x251*x257);
IkReal x284=((7.2e-7)*x251*x259);
IkReal x285=(x265+x270);
IkReal x286=(x274+x272+x273+x271+x279+x280);
IkReal x287=(x267+x266+x269+x268+x277+x278);
IkReal x288=(x276+x275+x284+x283+x282+x281);
IkReal x289=((((0.772)*x249*x259))+(((0.772)*x249*x257))+(((-1.0)*x250*x264))+(((-1.0)*x250*x260))+(((0.772)*x251*x257))+(((0.772)*x251*x259))+(((-1.0)*x256*x264))+(((-1.0)*x256*x260))+(((-1.0)*x253*x257))+(((-1.0)*x253*x259)));
op[0]=(x288+x286+(((-1.0)*x285)));
op[1]=x289;
op[2]=(x288+x287+(((-1.0)*x285)));
op[3]=((((1.544)*x249*x259))+(((1.544)*x249*x257))+(((1.544)*x251*x257))+(((1.544)*x251*x259))+(((-1.0)*x250*x263))+(((-1.0)*x250*x262))+(((-1.0)*x254*x259))+(((-1.0)*x254*x257))+(((-1.0)*x256*x262))+(((-1.0)*x256*x263)));
op[4]=(x287+x285+(((-1.0)*x288)));
op[5]=x289;
op[6]=(x286+x285+(((-1.0)*x288)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=(((htj1*(((((0.0744980000002592)*r02*(cj2*cj2)))+(((-1.44e-6)*cj4*py*sj0*(cj2*cj2)))+(((-0.772)*cj4*pz*(sj2*sj2)))+(((-0.772)*cj4*pz*(cj2*cj2)))+(((0.0744980000002592)*r02*(sj2*sj2)))+(((-1.44e-6)*cj4*py*sj0*(sj2*sj2)))+(((-1.44e-6)*cj0*cj4*px*(sj2*sj2)))+(((-1.44e-6)*cj0*cj4*px*(cj2*cj2)))))))+(((htj1*htj1*htj1)*(((((-1.544)*cj4*pz*(cj2*cj2)))+(((0.148996000000518)*r02*(sj2*sj2)))+(((-2.88e-6)*cj4*py*sj0*(sj2*sj2)))+(((0.148996000000518)*r02*(cj2*cj2)))+(((-1.544)*cj4*pz*(sj2*sj2)))+(((-2.88e-6)*cj4*py*sj0*(cj2*cj2)))+(((-2.88e-6)*cj0*cj4*px*(cj2*cj2)))+(((-2.88e-6)*cj0*cj4*px*(sj2*sj2)))))))+(((0.0372490000001296)*cj0*r00*(sj2*sj2)))+(((7.2e-7)*cj4*pz*(cj2*cj2)))+(((0.0372490000001296)*r01*sj0*(sj2*sj2)))+(((0.036283999999856)*cj4*(sj2*sj2*sj2)))+(((-7.906e-8)*cj4*(cj2*cj2)))+(((-0.386)*cj4*py*sj0*(sj2*sj2)))+(((-0.386)*cj0*cj4*px*(sj2*sj2)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((0.386)*cj4*py*sj0*(cj2*cj2)))+(((0.036283999999856)*cj4*(sj2*sj2*sj2)))+(((-7.906e-8)*cj4*(cj2*cj2)))+(((-0.0372490000001296)*r01*sj0*(sj2*sj2)))+(((-7.2e-7)*cj4*pz*(cj2*cj2)))+(((-0.0372490000001296)*cj0*r00*(cj2*cj2)))+(((-7.906e-8)*cj4*(sj2*sj2)))+(((-1.4488e-7)*cj2*cj4*(sj2*sj2)))+(((0.386)*cj0*cj4*px*(cj2*cj2)))+(((0.386)*cj4*py*sj0*(sj2*sj2)))+(((-0.0372490000001296)*r01*sj0*(cj2*cj2)))+(((-0.0372490000001296)*cj0*r00*(sj2*sj2)))+(((-7.2e-7)*cj4*pz*(sj2*sj2)))+(((0.036283999999856)*cj4*sj2*(cj2*cj2)))+(((-1.4488e-7)*cj4*(cj2*cj2*cj2)))+(((0.386)*cj0*cj4*px*(sj2*sj2)))))))+(((-7.906e-8)*cj4*(sj2*sj2)))+(((0.0372490000001296)*cj0*r00*(cj2*cj2)))+(((-1.4488e-7)*cj2*cj4*(sj2*sj2)))+(((-0.386)*cj0*cj4*px*(cj2*cj2)))+(((-0.386)*cj4*py*sj0*(cj2*cj2)))+(((0.036283999999856)*cj4*sj2*(cj2*cj2)))+(((-1.4488e-7)*cj4*(cj2*cj2*cj2)))+(((htj1*htj1)*(((((0.108851999999568)*cj4*sj2*(cj2*cj2)))+(((-2.3718e-7)*cj4*(sj2*sj2)))+(((0.0372490000001296)*cj0*r00*(sj2*sj2)))+(((7.2e-7)*cj4*pz*(cj2*cj2)))+(((0.0372490000001296)*r01*sj0*(sj2*sj2)))+(((-0.386)*cj4*py*sj0*(sj2*sj2)))+(((-0.386)*cj0*cj4*px*(sj2*sj2)))+(((-4.3464e-7)*cj4*(cj2*cj2*cj2)))+(((0.108851999999568)*cj4*(sj2*sj2*sj2)))+(((-2.3718e-7)*cj4*(cj2*cj2)))+(((0.0372490000001296)*cj0*r00*(cj2*cj2)))+(((-0.386)*cj0*cj4*px*(cj2*cj2)))+(((-0.386)*cj4*py*sj0*(cj2*cj2)))+(((-4.3464e-7)*cj2*cj4*(sj2*sj2)))+(((0.0372490000001296)*r01*sj0*(cj2*cj2)))+(((7.2e-7)*cj4*pz*(sj2*sj2)))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((0.0744980000002592)*r02*(cj2*cj2)))+(((-1.44e-6)*cj4*py*sj0*(cj2*cj2)))+(((-0.772)*cj4*pz*(sj2*sj2)))+(((-0.772)*cj4*pz*(cj2*cj2)))+(((0.0744980000002592)*r02*(sj2*sj2)))+(((-1.44e-6)*cj4*py*sj0*(sj2*sj2)))+(((-1.44e-6)*cj0*cj4*px*(sj2*sj2)))+(((-1.44e-6)*cj0*cj4*px*(cj2*cj2)))))))+(((0.0372490000001296)*r01*sj0*(cj2*cj2)))+(((htj1*htj1*htj1*htj1)*(((((0.108851999999568)*cj4*sj2*(cj2*cj2)))+(((-2.3718e-7)*cj4*(sj2*sj2)))+(((0.386)*cj4*py*sj0*(cj2*cj2)))+(((-0.0372490000001296)*r01*sj0*(sj2*sj2)))+(((-7.2e-7)*cj4*pz*(cj2*cj2)))+(((-0.0372490000001296)*cj0*r00*(cj2*cj2)))+(((-4.3464e-7)*cj4*(cj2*cj2*cj2)))+(((0.108851999999568)*cj4*(sj2*sj2*sj2)))+(((-2.3718e-7)*cj4*(cj2*cj2)))+(((0.386)*cj0*cj4*px*(cj2*cj2)))+(((0.386)*cj4*py*sj0*(sj2*sj2)))+(((-0.0372490000001296)*r01*sj0*(cj2*cj2)))+(((-4.3464e-7)*cj2*cj4*(sj2*sj2)))+(((-0.0372490000001296)*cj0*r00*(sj2*sj2)))+(((-7.2e-7)*cj4*pz*(sj2*sj2)))+(((0.386)*cj0*cj4*px*(sj2*sj2)))))))+(((7.2e-7)*cj4*pz*(sj2*sj2))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x290=(cj1*cj2);
IkReal x291=((10.3626943004821)*pz);
IkReal x292=(py*sj0);
IkReal x293=(cj1*sj2);
IkReal x294=(sj1*sj2);
IkReal x295=(cj2*sj1);
IkReal x296=((1.93293779698111e-5)*pz);
IkReal x297=((1.93293779698111e-5)*cj0*px);
IkReal x298=((10.3626943004821)*cj0*px);
IkReal x299=((10.3626943004821)*sj1*x292);
if( IKabs(((3.88950038925866e-6)+((x291*x295))+((x290*x298))+(((-1.0)*x291*x293))+(((-1.0)*x290*x296))+(((10.3626943004821)*x292*x294))+(((2.12247308651843e-6)*cj2))+(((-1.0)*x293*x297))+(((1.93293779698111e-5)*x292*x295))+((x295*x297))+(((-1.93293779698111e-5)*x292*x293))+((x294*x298))+(((0.860103626939046)*sj2))+(((-1.0)*x294*x296))+(((10.3626943004821)*x290*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.97409326424145)+((x291*x294))+((x290*x291))+((x290*x297))+(((-10.3626943004821)*x292*x295))+(((10.3626943004821)*x292*x293))+(((-1.0)*x293*x296))+(((1.93293779698111e-5)*x292*x294))+(((-0.860103626939046)*cj2))+((x295*x296))+(((-1.0)*x295*x298))+(((2.12247308651843e-6)*sj2))+((x294*x297))+((x293*x298))+(((1.93293779698111e-5)*x290*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.88950038925866e-6)+((x291*x295))+((x290*x298))+(((-1.0)*x291*x293))+(((-1.0)*x290*x296))+(((10.3626943004821)*x292*x294))+(((2.12247308651843e-6)*cj2))+(((-1.0)*x293*x297))+(((1.93293779698111e-5)*x292*x295))+((x295*x297))+(((-1.93293779698111e-5)*x292*x293))+((x294*x298))+(((0.860103626939046)*sj2))+(((-1.0)*x294*x296))+(((10.3626943004821)*x290*x292))))+IKsqr(((-0.97409326424145)+((x291*x294))+((x290*x291))+((x290*x297))+(((-10.3626943004821)*x292*x295))+(((10.3626943004821)*x292*x293))+(((-1.0)*x293*x296))+(((1.93293779698111e-5)*x292*x294))+(((-0.860103626939046)*cj2))+((x295*x296))+(((-1.0)*x295*x298))+(((2.12247308651843e-6)*sj2))+((x294*x297))+((x293*x298))+(((1.93293779698111e-5)*x290*x292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((3.88950038925866e-6)+((x291*x295))+((x290*x298))+(((-1.0)*x291*x293))+(((-1.0)*x290*x296))+(((10.3626943004821)*x292*x294))+(((2.12247308651843e-6)*cj2))+(((-1.0)*x293*x297))+(((1.93293779698111e-5)*x292*x295))+((x295*x297))+(((-1.93293779698111e-5)*x292*x293))+((x294*x298))+(((0.860103626939046)*sj2))+(((-1.0)*x294*x296))+(((10.3626943004821)*x290*x292))), ((-0.97409326424145)+((x291*x294))+((x290*x291))+((x290*x297))+(((-10.3626943004821)*x292*x295))+(((10.3626943004821)*x292*x293))+(((-1.0)*x293*x296))+(((1.93293779698111e-5)*x292*x294))+(((-0.860103626939046)*cj2))+((x295*x296))+(((-1.0)*x295*x298))+(((2.12247308651843e-6)*sj2))+((x294*x297))+((x293*x298))+(((1.93293779698111e-5)*x290*x292))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x300=IKsin(j3);
IkReal x301=IKcos(j3);
IkReal x302=((2.0e-7)*cj2);
IkReal x303=((0.094)*sj2);
IkReal x304=((2.0e-7)*sj2);
IkReal x305=((0.094)*cj2);
IkReal x306=pz*pz;
IkReal x307=py*py;
IkReal x308=px*px;
IkReal x309=(py*sj1);
IkReal x310=((1.0e-7)*r00);
IkReal x311=(pz*r01);
IkReal x312=((1.0e-7)*sj1);
IkReal x313=(r02*sj1);
IkReal x314=((1.0)*px);
IkReal x315=(r01*sj1);
IkReal x316=(cj0*r01);
IkReal x317=((0.166)*px);
IkReal x318=(cj0*r02);
IkReal x319=(cj1*r01);
IkReal x320=(r00*sj0);
IkReal x321=(cj1*py);
IkReal x322=((2.0)*px);
IkReal x323=(cj0*r00);
IkReal x324=((1.0e-7)*cj0);
IkReal x325=(r01*sj0);
IkReal x326=((5.0e-8)*sj0);
IkReal x327=((1.0e-7)*px);
IkReal x328=((1.0e-7)*sj0);
IkReal x329=((0.166)*sj0);
IkReal x330=(r02*sj0);
IkReal x331=(cj1*r02);
IkReal x332=(cj0*pz);
IkReal x333=(cj0*sj1);
IkReal x334=(py*r01);
IkReal x335=(cj0*cj1);
IkReal x336=(cj1*pz);
IkReal x337=((1.0)*sj0);
IkReal x338=((8.3e-9)*sj0);
IkReal x339=(pz*sj1);
IkReal x340=((2.0)*pz);
IkReal x341=(pz*r02);
IkReal x342=(py*r02);
IkReal x343=(cj1*px);
IkReal x344=((7.244e-8)*x300);
IkReal x345=((0.018141999999928)*x301);
IkReal x346=((8.3e-9)*x331);
IkReal x347=((1.0e-7)*x334);
IkReal x348=((1.0e-7)*x341);
IkReal x349=(px*x310);
IkReal x350=((0.0965)*x301);
IkReal x351=(cj1*x308);
IkReal x352=(cj2*x300);
IkReal x353=((3.6e-14)*x301);
IkReal x354=(cj1*x307);
IkReal x355=(sj2*x300);
IkReal x356=((1.0)*x307);
IkReal x357=(cj2*x301);
IkReal x358=((1.0)*x306);
IkReal x359=((1.0)*x308);
IkReal x360=(sj2*x301);
IkReal x361=((1.8e-7)*x355);
IkReal x362=((1.8e-7)*x357);
IkReal x363=((0.0965)*x352);
IkReal x364=(sj2*x350);
IkReal x365=(cj2*x350);
IkReal x366=((0.0965)*x355);
IkReal x367=((1.8e-7)*x352);
IkReal x368=((1.8e-7)*x360);
IkReal x369=(x319*x327);
IkReal x370=(x315*x338);
IkReal x371=(x310*x321);
IkReal x372=((8.3e-9)*sj1*x323);
IkReal x373=(px*x312*x330);
IkReal x374=(cj0*x311*x312);
IkReal x375=((1.0e-7)*x309*x318);
IkReal x376=(sj0*x310*x339);
IkReal x377=(x302+x361);
IkReal x378=(x304+x305+x365);
IkReal x379=(x368+x366+x367);
IkReal x380=(x376+x375+x371);
IkReal x381=(x374+x373+x369);
IkReal x382=(x303+x362+x363+x364);
IkReal x383=(x347+x348+x349+x372+x370);
evalcond[0]=((5.0e-8)+((px*x335))+x339+x377+((sj0*x321))+(((-1.0)*x382)));
evalcond[1]=((-0.083)+(((-1.0)*x378))+x336+x379+(((-1.0)*x314*x333))+(((-1.0)*x309*x337)));
evalcond[2]=((0.0112592500000774)+(((-1.0)*sj0*x327))+(((-1.0)*x309*x329))+(((-1.0)*x321*x328))+(((-1.0)*x358))+(((-1.0)*x359))+(((-1.0)*x356))+(((-1.0)*x324*x343))+((py*x324))+x345+(((-1.0)*x317*x333))+(((-1.0)*pz*x312))+(((0.166)*x336))+(((-1.0)*x344)));
evalcond[3]=(((r00*x321))+(((-5.0e-8)*cj1*x323))+(((-5.0e-8)*x316))+(((-5.0e-8)*x313))+x377+((x309*x318))+((x320*x339))+(((-1.0)*x319*x326))+(((-1.0)*sj0*x313*x314))+(((-1.0)*x382))+(((-1.0)*x314*x319))+(((5.0e-8)*x320))+(((-1.0)*x311*x333)));
evalcond[4]=((((-1.0)*x379))+(((-1.0)*x315*x326))+((x311*x335))+x378+(((-0.083)*x316))+(((5.0e-8)*x331))+(((-1.0)*x314*x315))+(((-5.0e-8)*sj1*x323))+((x330*x343))+(((0.083)*x320))+((r00*x309))+(((-1.0)*x318*x321))+(((-1.0)*x320*x336)));
evalcond[5]=((-0.0181482500000624)+(((-5.0e-15)*x313))+((cj1*x317*x330))+(((-0.006889)*x316))+(((-1.0)*x320*x359))+((py*x322*x323))+x380+x346+x344+((x307*x316))+(((-0.166)*x318*x321))+(((0.166)*r00*x309))+(((0.006889)*x320))+(((-1.0)*pz*x322*x330))+(((-1.0)*x315*x317))+(((-5.0e-15)*cj1*x323))+(((-1.0)*x316*x358))+(((-1.0)*x316*x359))+(((-1.0)*x383))+(((-1.0)*x381))+(((-1.0)*py*x322*x325))+(((-1.0)*x345))+((py*x318*x340))+(((-5.0e-15)*sj0*x319))+((x306*x320))+((x307*x320))+(((0.166)*x311*x335))+(((-0.166)*x320*x336)));
evalcond[6]=(((x323*x354))+((x317*x318))+(((-1.0)*x321*x330*x340))+(((-1.0)*x323*x351))+(((-1.0)*x320*x321*x322))+(((-1.0)*r00*x322*x339))+(((5.0e-15)*x316))+(((-1.0)*x307*x319*x337))+((x329*x342))+(((-5.0e-15)*x320))+((x308*x313))+(((-2.0)*x309*x311))+(((1.88e-8)*sj2))+(((-0.166)*pz*x323))+(((0.006889)*cj1*x323))+x381+x346+(((1.93e-8)*x360))+((sj0*x308*x319))+((x307*x313))+((sj0*x306*x319))+(((-1.0)*x311*x329))+(((-1.0)*x383))+(((-1.0)*x380))+(((-1.0)*x313*x358))+(((-4.0e-14)*cj2))+(((0.006889)*x313))+((cj1*x306*x323))+(((-3.6e-14)*x355))+(((0.006889)*sj0*x319))+(((1.93e-8)*x352))+((cj2*x353))+(((-1.0)*x318*x322*x336))+(((-1.0)*x316*x321*x322)));
evalcond[7]=(((x318*x327))+(((-1.0)*x308*x315*x337))+(((-1.0)*x331*x358))+(((-1.0)*sj2*x353))+(((-1.0)*x306*x315*x337))+(((8.3e-9)*x320))+((x309*x320*x322))+((cj1*x327*x330))+(((-1.0)*x310*x332))+((sj1*x308*x323))+(((-1.0)*r00*x322*x336))+(((8.3e-9)*x313))+(((-1.93e-8)*x355))+(((1.88e-8)*cj2))+((x319*x338))+((x309*x316*x322))+((sj0*x307*x315))+((x308*x331))+((x309*x310))+(((-1.0)*sj0*x310*x336))+(((-1.0)*px*r01*x312))+((r00*x317))+(((-8.3e-9)*x316))+(((-1.0)*x311*x328))+((x309*x330*x340))+(((-0.006888999999995)*x331))+(((-2.0)*x311*x321))+(((4.0e-14)*sj2))+(((-1.0)*sj1*x323*x358))+(((-1.0)*sj1*x323*x356))+((x313*x322*x332))+((x307*x331))+((cj1*x311*x324))+(((0.166)*x334))+(((0.006888999999995)*sj0*x315))+((x328*x342))+(((-3.6e-14)*x352))+(((0.166)*x341))+(((1.93e-8)*x357))+(((-1.0e-7)*x318*x321))+(((8.3e-9)*cj1*x323))+(((0.006888999999995)*sj1*x323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x384=(cj1*cj2);
IkReal x385=((10.3626943004821)*pz);
IkReal x386=(py*sj0);
IkReal x387=(cj1*sj2);
IkReal x388=(sj1*sj2);
IkReal x389=(cj2*sj1);
IkReal x390=((1.93293779698111e-5)*pz);
IkReal x391=((1.93293779698111e-5)*cj0*px);
IkReal x392=((10.3626943004821)*cj0*px);
IkReal x393=((10.3626943004821)*sj1*x386);
if( IKabs(((3.88950038925866e-6)+(((-1.93293779698111e-5)*x386*x387))+(((-1.0)*x387*x391))+(((-1.0)*x384*x390))+(((10.3626943004821)*x384*x386))+(((10.3626943004821)*x386*x388))+(((2.12247308651843e-6)*cj2))+(((-1.0)*x388*x390))+((x385*x389))+((x384*x392))+(((1.93293779698111e-5)*x386*x389))+((x389*x391))+(((0.860103626939046)*sj2))+(((-1.0)*x385*x387))+((x388*x392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.97409326424145)+(((-1.0)*x387*x390))+((x384*x385))+(((1.93293779698111e-5)*x384*x386))+(((10.3626943004821)*x386*x387))+(((-1.0)*x389*x392))+(((-10.3626943004821)*x386*x389))+(((-0.860103626939046)*cj2))+((x385*x388))+((x387*x392))+((x384*x391))+(((2.12247308651843e-6)*sj2))+(((1.93293779698111e-5)*x386*x388))+((x389*x390))+((x388*x391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.88950038925866e-6)+(((-1.93293779698111e-5)*x386*x387))+(((-1.0)*x387*x391))+(((-1.0)*x384*x390))+(((10.3626943004821)*x384*x386))+(((10.3626943004821)*x386*x388))+(((2.12247308651843e-6)*cj2))+(((-1.0)*x388*x390))+((x385*x389))+((x384*x392))+(((1.93293779698111e-5)*x386*x389))+((x389*x391))+(((0.860103626939046)*sj2))+(((-1.0)*x385*x387))+((x388*x392))))+IKsqr(((-0.97409326424145)+(((-1.0)*x387*x390))+((x384*x385))+(((1.93293779698111e-5)*x384*x386))+(((10.3626943004821)*x386*x387))+(((-1.0)*x389*x392))+(((-10.3626943004821)*x386*x389))+(((-0.860103626939046)*cj2))+((x385*x388))+((x387*x392))+((x384*x391))+(((2.12247308651843e-6)*sj2))+(((1.93293779698111e-5)*x386*x388))+((x389*x390))+((x388*x391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((3.88950038925866e-6)+(((-1.93293779698111e-5)*x386*x387))+(((-1.0)*x387*x391))+(((-1.0)*x384*x390))+(((10.3626943004821)*x384*x386))+(((10.3626943004821)*x386*x388))+(((2.12247308651843e-6)*cj2))+(((-1.0)*x388*x390))+((x385*x389))+((x384*x392))+(((1.93293779698111e-5)*x386*x389))+((x389*x391))+(((0.860103626939046)*sj2))+(((-1.0)*x385*x387))+((x388*x392))), ((-0.97409326424145)+(((-1.0)*x387*x390))+((x384*x385))+(((1.93293779698111e-5)*x384*x386))+(((10.3626943004821)*x386*x387))+(((-1.0)*x389*x392))+(((-10.3626943004821)*x386*x389))+(((-0.860103626939046)*cj2))+((x385*x388))+((x387*x392))+((x384*x391))+(((2.12247308651843e-6)*sj2))+(((1.93293779698111e-5)*x386*x388))+((x389*x390))+((x388*x391))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x394=IKsin(j3);
IkReal x395=IKcos(j3);
IkReal x396=((0.094)*sj2);
IkReal x397=((2.0e-7)*cj2);
IkReal x398=((2.0e-7)*sj2);
IkReal x399=((0.094)*cj2);
IkReal x400=pz*pz;
IkReal x401=py*py;
IkReal x402=px*px;
IkReal x403=(py*sj1);
IkReal x404=((1.0e-7)*r00);
IkReal x405=(pz*r01);
IkReal x406=((1.0e-7)*sj1);
IkReal x407=(r02*sj1);
IkReal x408=((1.0)*px);
IkReal x409=(r01*sj1);
IkReal x410=(cj0*r01);
IkReal x411=((0.166)*px);
IkReal x412=(cj0*r02);
IkReal x413=(cj1*r01);
IkReal x414=(r00*sj0);
IkReal x415=(cj1*py);
IkReal x416=((2.0)*px);
IkReal x417=(cj0*r00);
IkReal x418=((1.0e-7)*cj0);
IkReal x419=(r01*sj0);
IkReal x420=((5.0e-8)*sj0);
IkReal x421=((1.0e-7)*px);
IkReal x422=((1.0e-7)*sj0);
IkReal x423=((0.166)*sj0);
IkReal x424=(r02*sj0);
IkReal x425=(cj1*r02);
IkReal x426=(cj0*pz);
IkReal x427=(cj0*sj1);
IkReal x428=(py*r01);
IkReal x429=(cj0*cj1);
IkReal x430=(cj1*pz);
IkReal x431=((1.0)*sj0);
IkReal x432=((8.3e-9)*sj0);
IkReal x433=(pz*sj1);
IkReal x434=((2.0)*pz);
IkReal x435=(pz*r02);
IkReal x436=(py*r02);
IkReal x437=(cj1*px);
IkReal x438=((0.018141999999928)*x395);
IkReal x439=((7.244e-8)*x394);
IkReal x440=((8.3e-9)*x425);
IkReal x441=((1.0e-7)*x428);
IkReal x442=((1.0e-7)*x435);
IkReal x443=(px*x404);
IkReal x444=((0.0965)*x395);
IkReal x445=(cj1*x402);
IkReal x446=(cj2*x394);
IkReal x447=((3.6e-14)*x395);
IkReal x448=(cj1*x401);
IkReal x449=(sj2*x394);
IkReal x450=((1.0)*x401);
IkReal x451=(cj2*x395);
IkReal x452=((1.0)*x400);
IkReal x453=((1.0)*x402);
IkReal x454=(sj2*x395);
IkReal x455=((1.8e-7)*x451);
IkReal x456=((0.0965)*x446);
IkReal x457=(sj2*x444);
IkReal x458=((1.8e-7)*x449);
IkReal x459=((0.0965)*x449);
IkReal x460=((1.8e-7)*x446);
IkReal x461=((1.8e-7)*x454);
IkReal x462=(cj2*x444);
IkReal x463=(x413*x421);
IkReal x464=(x409*x432);
IkReal x465=(x404*x415);
IkReal x466=((8.3e-9)*sj1*x417);
IkReal x467=(px*x406*x424);
IkReal x468=(cj0*x405*x406);
IkReal x469=((1.0e-7)*x403*x412);
IkReal x470=(sj0*x404*x433);
IkReal x471=(x397+x458);
IkReal x472=(x399+x398+x462);
IkReal x473=(x459+x461+x460);
IkReal x474=(x468+x463+x467);
IkReal x475=(x469+x465+x470);
IkReal x476=(x396+x456+x457+x455);
IkReal x477=(x441+x443+x442+x466+x464);
evalcond[0]=((5.0e-8)+((sj0*x415))+(((-1.0)*x476))+x433+x471+((px*x429)));
evalcond[1]=((-0.083)+(((-1.0)*x403*x431))+(((-1.0)*x472))+x430+x473+(((-1.0)*x408*x427)));
evalcond[2]=((0.0112592500000774)+((py*x418))+(((-1.0)*x439))+(((-1.0)*sj0*x421))+(((-1.0)*x450))+(((-1.0)*x453))+(((-1.0)*x452))+x438+(((0.166)*x430))+(((-1.0)*pz*x406))+(((-1.0)*x415*x422))+(((-1.0)*x411*x427))+(((-1.0)*x418*x437))+(((-1.0)*x403*x423)));
evalcond[3]=((((-5.0e-8)*cj1*x417))+((x414*x433))+(((5.0e-8)*x414))+(((-1.0)*x471))+(((-5.0e-8)*x410))+(((-1.0)*sj0*x407*x408))+(((-5.0e-8)*x407))+((r00*x415))+x476+(((-1.0)*x405*x427))+(((-1.0)*x413*x420))+((x403*x412))+(((-1.0)*x408*x413)));
evalcond[4]=(((x424*x437))+(((5.0e-8)*x425))+(((-0.083)*x410))+(((-1.0)*x414*x430))+(((-1.0)*x472))+((x405*x429))+((r00*x403))+(((-1.0)*x412*x415))+x473+(((-1.0)*x409*x420))+(((-5.0e-8)*sj1*x417))+(((0.083)*x414))+(((-1.0)*x408*x409)));
evalcond[5]=((0.0181482500000624)+(((0.166)*x405*x429))+(((-1.0)*x439))+(((-0.166)*x412*x415))+(((-1.0)*x410*x453))+(((-1.0)*x410*x452))+(((-5.0e-15)*cj1*x417))+(((-1.0)*py*x416*x419))+(((-1.0)*x477))+(((-1.0)*x474))+((py*x416*x417))+(((0.006889)*x414))+(((-1.0)*x414*x453))+(((0.166)*r00*x403))+((cj1*x411*x424))+x438+x440+x475+(((-0.006889)*x410))+(((-5.0e-15)*sj0*x413))+(((-0.166)*x414*x430))+(((-1.0)*pz*x416*x424))+(((-5.0e-15)*x407))+((x400*x414))+((x401*x410))+((x401*x414))+((py*x412*x434))+(((-1.0)*x409*x411)));
evalcond[6]=((((-1.88e-8)*sj2))+(((-1.0)*cj2*x447))+((sj0*x402*x413))+(((4.0e-14)*cj2))+((x411*x412))+((cj1*x400*x417))+(((-1.93e-8)*x446))+(((5.0e-15)*x410))+(((-1.0)*x477))+(((-1.0)*x475))+(((-1.0)*x412*x416*x430))+(((-1.0)*x410*x415*x416))+(((0.006889)*cj1*x417))+(((-0.166)*pz*x417))+(((0.006889)*x407))+(((-1.0)*x405*x423))+(((-1.0)*x414*x415*x416))+(((3.6e-14)*x449))+(((-1.0)*r00*x416*x433))+x440+x474+((x423*x436))+(((0.006889)*sj0*x413))+(((-1.0)*x417*x445))+((x417*x448))+(((-1.93e-8)*x454))+(((-2.0)*x403*x405))+(((-5.0e-15)*x414))+(((-1.0)*x407*x452))+((x402*x407))+(((-1.0)*x401*x413*x431))+(((-1.0)*x415*x424*x434))+((x401*x407))+((sj0*x400*x413)));
evalcond[7]=(((x402*x425))+((sj0*x401*x409))+(((-2.0)*x405*x415))+(((-1.0)*x402*x409*x431))+(((-1.0)*sj0*x404*x430))+(((-1.0e-7)*x412*x415))+((x403*x410*x416))+(((8.3e-9)*cj1*x417))+(((-1.88e-8)*cj2))+(((-0.006888999999995)*x425))+((x413*x432))+(((-1.0)*x400*x409*x431))+(((-1.0)*x405*x422))+(((3.6e-14)*x446))+(((-1.0)*r00*x416*x430))+(((1.93e-8)*x449))+((r00*x411))+((sj1*x402*x417))+(((0.006888999999995)*sj0*x409))+(((-1.0)*x404*x426))+((sj2*x447))+(((0.166)*x428))+((x412*x421))+(((-4.0e-14)*sj2))+(((0.166)*x435))+(((0.006888999999995)*sj1*x417))+((x403*x414*x416))+(((-1.93e-8)*x451))+((x401*x425))+((x407*x416*x426))+((x403*x424*x434))+((cj1*x421*x424))+(((8.3e-9)*x414))+(((-8.3e-9)*x410))+((x403*x404))+((cj1*x405*x418))+(((-1.0)*x425*x452))+(((-1.0)*px*r01*x406))+(((8.3e-9)*x407))+(((-1.0)*sj1*x417*x450))+(((-1.0)*sj1*x417*x452))+((x422*x436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x478=(cj1*cj2);
IkReal x479=(cj0*r00);
IkReal x480=(r02*sj2);
IkReal x481=(cj2*sj1);
IkReal x482=(r01*sj0);
IkReal x483=(sj2*x482);
CheckValue<IkReal> x484=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x480))+((x478*x479))+((sj1*sj2*x479))+((r02*x481))+((sj1*x483))+((x478*x482)))),IkReal((((cj1*sj2*x479))+((sj1*x480))+((r02*x478))+((cj1*x483))+(((-1.0)*x479*x481))+(((-1.0)*x481*x482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x485.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x484.value)))+(x485.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x486=IKsin(j3);
IkReal x487=IKcos(j3);
IkReal x488=pz*pz;
IkReal x489=py*py;
IkReal x490=px*px;
IkReal x491=(py*sj1);
IkReal x492=(cj0*r01);
IkReal x493=(cj1*r01);
IkReal x494=((2.0)*pz);
IkReal x495=((1.0e-7)*r00);
IkReal x496=(sj2*sj4);
IkReal x497=(r02*sj1);
IkReal x498=((1.0)*sj0);
IkReal x499=(py*r02);
IkReal x500=(r00*sj0);
IkReal x501=((7.234e-8)*cj4);
IkReal x502=(r01*sj1);
IkReal x503=((0.166)*px);
IkReal x504=(cj0*r02);
IkReal x505=((0.166)*r01);
IkReal x506=(r02*sj0);
IkReal x507=((1.0)*px);
IkReal x508=(cj1*py);
IkReal x509=((2.0)*px);
IkReal x510=((0.166)*r00);
IkReal x511=((1.0e-7)*cj0);
IkReal x512=(cj1*r02);
IkReal x513=(cj0*cj1);
IkReal x514=(pz*sj1);
IkReal x515=((5.0e-8)*sj0);
IkReal x516=((1.0e-7)*px);
IkReal x517=(pz*sj0);
IkReal x518=((1.0e-7)*r01);
IkReal x519=(cj0*pz);
IkReal x520=(cj0*sj1);
IkReal x521=(cj4*sj2);
IkReal x522=((0.083)*sj0);
IkReal x523=(cj1*pz);
IkReal x524=(cj2*sj4);
IkReal x525=((8.3e-9)*sj0);
IkReal x526=((5.0e-8)*r00);
IkReal x527=((1.0e-7)*sj0);
IkReal x528=(py*r01);
IkReal x529=(cj1*px);
IkReal x530=(pz*r02);
IkReal x531=(cj2*cj4);
IkReal x532=((0.083)*r00);
IkReal x533=((0.166)*sj0);
IkReal x534=((8.3e-9)*r00);
IkReal x535=((1.0e-7)*sj2);
IkReal x536=((5.0e-8)*x500);
IkReal x537=((5.0e-8)*x492);
IkReal x538=((5.0e-8)*x497);
IkReal x539=((5.0e-8)*x512);
IkReal x540=((8.3e-9)*x512);
IkReal x541=(py*x518);
IkReal x542=((1.0e-7)*x530);
IkReal x543=(px*x495);
IkReal x544=((0.0965)*x487);
IkReal x545=(sj0*x488);
IkReal x546=((1.0e-7)*x514);
IkReal x547=((3.6e-14)*x486);
IkReal x548=(cj2*x486);
IkReal x549=((3.6e-14)*x487);
IkReal x550=(cj4*x486);
IkReal x551=(cj4*x487);
IkReal x552=((1.0)*x490);
IkReal x553=(r00*x489);
IkReal x554=((1.8e-7)*x487);
IkReal x555=((1.8e-7)*x486);
IkReal x556=((0.0965)*x486);
IkReal x557=((1.0)*x488);
IkReal x558=((0.018141999999928)*x487);
IkReal x559=(r00*x490);
IkReal x560=((7.244e-8)*x486);
IkReal x561=(x493*x515);
IkReal x562=(x513*x526);
IkReal x563=(x502*x515);
IkReal x564=(x520*x526);
IkReal x565=(x493*x516);
IkReal x566=(x502*x525);
IkReal x567=(x495*x508);
IkReal x568=(x520*x534);
IkReal x569=(x487*x524);
IkReal x570=(sj0*x497*x516);
IkReal x571=(x492*x546);
IkReal x572=((1.0e-7)*x491*x504);
IkReal x573=(sj0*x495*x514);
IkReal x574=(x564+x563);
IkReal x575=(x538+x562+x561);
IkReal x576=(x573+x572+x567);
IkReal x577=(x571+x570+x565);
IkReal x578=(x541+x542+x543+x568+x566);
evalcond[0]=((((-1.0)*x486*x531))+((sj0*x493))+x497+(((-1.0)*x487*x521))+((r00*x513)));
evalcond[1]=(((x486*x521))+(((-1.0)*x487*x531))+x512+(((-1.0)*x498*x502))+(((-1.0)*r00*x520)));
evalcond[2]=((5.0e-8)+((px*x513))+(((-0.094)*sj2))+(((2.0e-7)*cj2))+(((-1.0)*sj2*x544))+((sj0*x508))+(((-1.0)*cj2*x554))+((sj2*x555))+(((-0.0965)*x548))+x514);
evalcond[3]=((-0.083)+(((-1.0)*x491*x498))+(((-1.0)*x507*x520))+(((-1.0)*cj2*x544))+((sj2*x556))+((sj2*x554))+(((-2.0e-7)*sj2))+(((-0.094)*cj2))+x523+(((1.8e-7)*x548)));
evalcond[4]=((0.0112592500000774)+(((-1.0)*x511*x529))+(((-1.0)*x503*x520))+((py*x511))+(((-1.0)*x546))+(((-1.0)*x489))+(((-1.0)*x557))+(((-1.0)*x552))+(((0.166)*x523))+x558+(((-1.0)*x508*x527))+(((-1.0)*sj0*x516))+(((-1.0)*x491*x533))+(((-1.0)*x560)));
evalcond[5]=(((r01*x517))+(((-0.094)*x550))+(((-0.083)*x497))+(((-2.0e-7)*x551))+(((-1.0)*x498*x499))+(((-1.0)*x493*x522))+(((-1.0)*x539))+x574+(((-1.0)*x504*x507))+(((1.8e-7)*cj4))+(((-1.0)*x513*x532))+((r00*x519)));
evalcond[6]=((((-2.0e-7)*x550))+(((-1.0)*x520*x532))+(((-1.0)*x530))+(((-1.0)*x528))+(((-1.0)*x536))+(((-1.0)*x502*x522))+(((-1.0)*r00*x507))+(((-1.0)*x575))+(((0.083)*x512))+x537+(((1.0e-7)*sj4))+(((0.0965)*cj4))+(((0.094)*x551)));
evalcond[7]=((((-1.0)*x524*x556))+(((-1.0)*x524*x554))+((x496*x555))+(((-1.0)*x537))+(((2.0e-7)*x524))+((r00*x508))+(((-1.0)*x492*x514))+(((-1.0)*x575))+((x500*x514))+((x491*x504))+(((-0.094)*x496))+x536+(((-1.0)*x493*x507))+(((1.0e-7)*x486*x531))+(((1.0e-7)*x487*x521))+(((-1.0)*x496*x544))+(((-1.0)*px*x497*x498)));
evalcond[8]=(((x492*x523))+(((-0.083)*x492))+(((-1.0e-7)*x487*x531))+(((0.083)*x500))+(((-1.0)*x524*x555))+(((-1.0)*x499*x513))+(((-1.0)*x502*x507))+(((-1.0)*r00*x498*x523))+(((-1.0)*x574))+x539+(((0.094)*x524))+(((-1.0)*x496*x556))+(((-1.0)*x496*x554))+((x506*x529))+((x524*x544))+((r00*x491))+(((1.0e-7)*x486*x521))+(((2.0e-7)*x496)));
evalcond[9]=(((x489*x500))+(((-0.006889)*x492))+((x491*x510))+(((-5.0e-15)*sj0*x493))+(((-0.166)*x500*x523))+(((1.93e-8)*cj4))+(((-5.0e-15)*x497))+((x488*x500))+(((-5.0e-15)*r00*x513))+((x489*x492))+(((-4.0e-14)*x550))+(((0.006889)*x500))+(((-1.0)*x502*x503))+(((-1.0)*x492*x557))+(((-1.0)*x492*x552))+((cj0*x494*x499))+(((-0.166)*x499*x513))+((sj4*x560))+(((0.166)*x492*x523))+(((-1.0)*sj4*x558))+(((-1.0)*x498*x559))+(((1.88e-8)*x551))+(((-1.0)*x578))+(((-1.0)*x577))+x540+x576+(((-0.0181482500000624)*sj4))+(((-1.0)*px*x494*x506))+((cj1*x503*x506))+(((-1.0)*sj0*x509*x528))+((cj0*py*r00*x509)));
evalcond[10]=((((-1.0)*x520*x553))+(((-1.0)*x502*x516))+(((-0.0004762499999976)*x486*x521))+(((-1.0)*x524*x547))+(((8.3e-9)*x500))+(((0.018142000000072)*x531))+((x491*x495))+(((8.3e-9)*x497))+((x491*x492*x509))+(((4.76e-9)*x521))+((x504*x516))+(((-1.0)*py*x493*x494))+(((0.0181482499999176)*x487*x531))+(((-1.0)*x512*x557))+(((1.88e-8)*x524))+((x520*x559))+(((1.93e-8)*x569))+(((0.166)*x530))+((cj1*x506*x516))+(((-1.0)*x517*x518))+(((-1.0)*r00*x520*x557))+((r00*x503))+((sj0*x489*x502))+(((1.0e-7)*x492*x523))+((x513*x534))+(((-1.0)*x488*x498*x502))+(((-1.0)*x501*x548))+((x491*x494*x506))+((x493*x525))+((x489*x512))+((x499*x527))+(((2.86e-9)*x487*x521))+(((-1.0)*r00*x494*x529))+(((-1.0)*cj1*x499*x511))+(((-1.0)*x490*x498*x502))+(((0.006888999999995)*sj0*x502))+(((-0.006888999999995)*x512))+(((0.006888999999995)*r00*x520))+((py*x505))+(((4.0e-14)*x496))+(((-8.3e-9)*x492))+(((-1.0)*cj1*x495*x517))+((x491*x500*x509))+(((-1.0)*x495*x519))+((cj0*px*x494*x497))+((x490*x512))+(((-1.93e-8)*x486*x496))+(((-1.0)*x496*x549)));
evalcond[11]=((((5.0e-15)*x492))+(((0.018142000000072)*x521))+(((-4.76e-9)*x531))+((x489*x497))+(((-1.0)*px*r00*sj1*x494))+(((0.006889)*sj0*x493))+(((-2.86e-9)*x487*x531))+(((-1.0)*cj1*sj0*x494*x499))+((x490*x497))+(((-4.0e-14)*x524))+(((0.0004762499999976)*x486*x531))+(((0.0181482499999176)*x487*x521))+(((1.88e-8)*x496))+(((-1.0)*x489*x493*x498))+((x493*x545))+(((1.93e-8)*x487*x496))+(((-5.0e-15)*x500))+(((-1.0)*sj2*x486*x501))+(((-1.0)*x578))+(((-1.0)*x576))+x540+x577+(((-1.0)*x505*x517))+((sj0*x490*x493))+((x503*x504))+((x499*x533))+((x513*x553))+(((-1.0)*r01*x491*x494))+(((-1.0)*r00*x513*x552))+((x524*x549))+(((1.93e-8)*x486*x524))+(((-1.0)*x494*x504*x529))+(((-1.0)*x492*x508*x509))+(((-1.0)*x510*x519))+((r00*x488*x513))+(((-1.0)*x500*x508*x509))+(((-1.0)*x496*x547))+(((0.006889)*r00*x513))+(((0.006889)*x497))+(((-1.0)*x497*x557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - crane_plus (d2662e1c2bb8244a9230bd8f9491ecd0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
